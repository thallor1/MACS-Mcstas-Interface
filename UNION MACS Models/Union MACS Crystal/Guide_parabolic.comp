/*******************************************************************************
*
* McStas, 
*
* Parabolic Neutron guide.
* Written by Jose Abelardo
*
* Models a parabolic guide with a length l, an ouptu radius rout, and the tip of
* the parabola in -zf
*
* The reflectivity profile may either use an analytical mode (see Component
* Manual) or a 2-columns reflectivity free text file with format
* [q(Angs-1) R(0-1)].
*
* Example: Guide(l=1.0, rin=0.1, rout=0.2,
*           R0=0.99, Qc=0.021, alpha=6.07, m=2, W=0.003
*
* This component does not work with gravitation on.
*
* %P
* INPUT PARAMETERS:
*
* l:       (m)    Length of the guide (zout in the equations)
* rout:    (m)    ouptut radius
* rin:     (m)    input radius
* R0:      (1)    Low-angle reflectivity
* Qc:      (AA-1) Critical scattering vector
* alpha:   (AA)   Slope of reflectivity
* m:       (1)    m-value of material. Zero means completely absorbing.
* W:       (AA-1) Width of supermirror cut-off
* reflect: (str)  Reflectivity file name. Format [q(Angs-1) R(0-1)]
*
* 
* Example values: m=4 Qc=0.0219 W=1/300 alpha=6.49 R0=1
*
* 
*******************************************************************************/

DEFINE COMPONENT Guide_parabolic
DEFINITION PARAMETERS (string reflect=0)
SETTING PARAMETERS (l,rin,rout, R0=0.99, Qc=0.0219, alpha=6.07, m=4, W=0.003)
OUTPUT PARAMETERS (pTable)

SHARE
%{
%include "read_table-lib"
%}

DECLARE
%{
  t_Table pTable;
%}

INITIALIZE
%{
  if (mcgravitation) fprintf(stderr,"WARNING: Guide: %s: "
    "This component produces wrong results with gravitation !\n",
    NAME_CURRENT_COMP);

  if (reflect && strlen(reflect)) {
    if (Table_Read(&pTable, reflect, 1) <= 0) /* read 1st block data from file into pTable */
      exit(fprintf(stderr,"Guide: %s: can not read file %s\n", NAME_CURRENT_COMP, reflect));
  } else {
    if (W < 0 || R0 < 0 || Qc < 0 || m < 0)
    { fprintf(stderr,"Guide: %s: W R0 Qc must be >0.\n", NAME_CURRENT_COMP);
      exit(-1); }
    if (m < 1 && m != 0) fprintf(stderr,"WARNING: Guide: %s: m < 1 behaves as if m=1.\n",
      NAME_CURRENT_COMP);
  }
%}

TRACE
%{
  double t1,t2,tp,ta;                              /* Intersection times. */
  double Ac,Bc,Cc;			                /* Intermediate values */
  double weight;                                /* Internal probability weight */
  double rposi;                                  /* distance from the z axis to the neutron path */ 
  double zfocal,afocal;			        /* Tip of the parabola and focal pont*/              		  
  double ww,aac;					/* variables to calculate dot product*/
  double q,i;                                    /* Q [1/AA] of reflection */
  double nlen2;                                 /* Vector lengths squared */
  double xii,yii,zii,pp;
  int kk;

  /* Propagate neutron to guide entrance. */
  PROP_Z0;
  /* Scatter here to ensure that fully transmitted neutrons will not be
     absorbed in a GROUP construction, e.g. all neutrons - even the
     later absorbed ones are scattered at the guide entry. */
  SCATTER;

  /* Absorb if the neutron miss the entrance */

   rposi=sqrt(x*x+y*y);
   if(rposi > rin) ABSORB;

  zfocal=rin*rin*l/(rin*rin-rout*rout);     /* calculate tip of the parabola */
  afocal=(rout*rout-rin*rin)/4/l;     /* calculate the focal pont of the parabola*/ 
  pp=1;
  kk=0;
//  printf("--------------------------------------------\n");
  for(;;)
  {
    /* Compute the intersection times. */
    ta=(l-z)/vz;     /** on the exit */  
    tp=ta;
    i=0;
    Ac=vx*vx+vy*vy;                
    Bc=2*(x*vx+y*vy-2*vz*afocal);     /* on the parabola */
    Cc=x*x + y*y + 4*afocal*(zfocal-z);
    aac=Bc*Bc-4*Ac*Cc;
    
    if (aac<0) {
    	t1=-1;
    	t2=-1;
    }
    else{
 	aac=sqrt(aac);	    
    	t1=(-1*Bc+aac)/(2*Ac);
    	t2=(-1*Bc-aac)/(2*Ac);
    }
   

   // if ( (t1>0) && (t1<1E-15)) t1=0;
    // if ( (t2>0) && (t2<1E-15)) t2=0;
    kk++;
//   printf("--\n");
   /* Check which time is the smallest */  /** check algorithm */

    if((t1<ta) && (t1>0) && ((t2<0) || (t1<t2)) )
    {
      tp = t1;
      i = 1;
    }
  
    if((t2<ta) && (t2>0) && ((t1<0) || (t2<t1)) )
    {
      tp = t2;
      i = 2;
    }  
   if(i == 0)
      break;                    /* Neutron left guide. */
//   printf("tp,ta,t1,t2,%E\t,%E\t,%E\t,%E\n",tp,ta,t1,t2);   
//   printf("l,x,y,z,%E\t,%E\t,%E\t,%E\n",l,x,y,z);
   
   xii=x;
   yii=y;
   zii=z;
   PROP_DT(tp);
   if ( (x==xii) &&(y==yii) && (z==zii) ) ABSORB;  

//   printf("l,xf,yf,zf,%E\t,%E\t,%E\t,%E\n",l,x,y,z);
   if (kk==500) break;
 //  printf("vx,vy,vz,v%E\t,%E\t,%E\t,%E\n",vx,vy,vz,vx*vx+vy*vy+vz*vz);
   /*Calculate the final velocity*/
    
//   printf("Nx,Ny,Nz,%E\t,%E\t,%E\n",2*x,2*y,-2*afocal*(afocal*z+rin));

   ww=2*(x*vx+y*vy-2*afocal*vz)/(x*x + y*y + 4*afocal*afocal);
  
   vx = vx - ww*x;
   vy = vy - ww*y;
   vz = vz + 2*afocal*ww;
   

//    printf("vxf,vyf,vzf,v%E\t,%E\t,%E\t,%E\n",vx,vy,vz,vx*vx+vy*vy+vz*vz);
   q=V2Q*abs(ww)*sqrt(x*x + y*y + 4*afocal*afocal);
   
    /* Now compute reflectivity. */
    weight = 1.0; /* Initial internal weight factor */
    if(m == 0)
      ABSORB;
    if (reflect && strlen(reflect))
      weight = Table_Value(pTable, q, 1);
    else if(q > Qc)
    {
      double arg = (q-m*Qc)/W;
      if(arg < 10)
        weight = .5*(1-tanh(arg))*(1-alpha*(q-Qc));
      else
        ABSORB;                               /* Cutoff ~ 1E-10 */
      weight *= R0;
    } else { /* q <= Qc */
      weight *= R0;
    }
    p *= weight;
    pp*=weight;
    SCATTER;
//    printf("q,Qc,p,%E\t,%E\t,%E\n",q,Qc,p);
   if (pp<1E-4) ABSORB;
  }
%}

MCDISPLAY
%{
  magnify("xy");
  circle("xy", 0, 0, 0, rin);
  circle("xy", 0, 0, l, rout);
%}

END














































