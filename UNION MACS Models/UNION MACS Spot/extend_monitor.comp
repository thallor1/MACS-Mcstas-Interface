/*******************************************************************************
*
* McStas, neutron ray-tracing package
*         Copyright 1997-2002, All rights reserved
*         Risoe National Laboratory, Roskilde, Denmark
*         Institut Laue Langevin, Grenoble, France
*
* Component: extend_monitor
*
* %I
* Written by:  Mads Bertelsen, (modified from TOF_monitor.comp)
* Date: Sep 19 2016
* Version: $Revision$
* Origin: JHU
* Release: McStas 2.3
*
* Rectangular monitor that will always count intensity recieved in bin 0,
*  but have N channels allocated by definition parameter, and the user can
*  use the extend section of the component to add the same intensity of other
*  channels by using some criteria defined in the extend code.
* The component thus acts as a setup for the extend section, and is not much
*  use without additional code.
* 
* %D
* 
* %P
* INPUT PARAMETERS:
*
* xmin:     Lower x bound of detector opening (m)
* xmax:     Upper x bound of detector opening (m)
* ymin:     Lower y bound of detector opening (m)
* ymax:     Upper y bound of detector opening (m)
* xwidth:   Width of detector. Overrides xmin,xmax. (m)
* yheight:  Height of detector. Overrides ymin,ymax. (m)
* nb:       Number of bins (1)
* filename: Name of file in which to store the detector image (text)
* restore_neutron: If set, the monitor does not influence the neutron state (1)
*
* OUTPUT PARAMETERS:
*
* C_N:    Array of neutron counts
* C_p:    Array of neutron weight counts
* C_p2:   Array of second moments
*
* %E
*******************************************************************************/

DEFINE COMPONENT extend_monitor
DEFINITION PARAMETERS (nb=20)
SETTING PARAMETERS (string filename=0, xmin=-0.05, xmax=0.05, ymin=-0.05, ymax=0.05, 
    xwidth=0, yheight=0, restore_neutron=0)
OUTPUT PARAMETERS (C_N, C_p, C_p2)
/* Neutron parameters: (x,y,z,vx,vy,vz,t,sx,sy,sz,p) */ 

DECLARE
  %{
    double C_N[nb];
    double C_p[nb];
    double C_p2[nb];
  %}

INITIALIZE
  %{
    int i;

    if (xwidth  > 0) { xmax = xwidth/2;  xmin = -xmax; }
    if (yheight > 0) { ymax = yheight/2; ymin = -ymax; }

    if ((xmin >= xmax) || (ymin >= ymax)) {
            printf("extend_monitor: %s: Null detection area !\n"
                   "ERROR        (xwidth,yheight,xmin,xmax,ymin,ymax). Exiting",
           NAME_CURRENT_COMP);
      exit(0);
    }

    for (i=0; i<nb; i++)
    {
      C_N[i] = 0;
      C_p[i] = 0;
      C_p2[i] = 0;
    }
  %}

TRACE
  %{
    int i;

    PROP_Z0;
    if (x>xmin && x<xmax && y>ymin && y<ymax)
    {
        C_N[0]++;
        C_p[0] += p;
        C_p2[0] += p*p;
        SCATTER;
    }
    if (restore_neutron) {
      RESTORE_NEUTRON(INDEX_CURRENT_COMP, x, y, z, vx, vy, vz, t, sx, sy, sz, p);
    }
  %}

SAVE
  %{
    DETECTOR_OUT_1D(
        "extend monitor",
        "channel number [1]",
        "Intensity",
        "bin", -0.5, nb-0.5, nb,
        &C_N[0],&C_p[0],&C_p2[0],
        filename);
  %}

MCDISPLAY
%{
  magnify("xy");
  multiline(5, (double)xmin, (double)ymin, 0.0,
               (double)xmax, (double)ymin, 0.0,
               (double)xmax, (double)ymax, 0.0,
               (double)xmin, (double)ymax, 0.0,
               (double)xmin, (double)ymin, 0.0);
%}

END
